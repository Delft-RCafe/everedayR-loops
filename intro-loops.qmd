---
title: "Introduction to Loops in R"
author: "R Caf√© @ TU Delft"
date: "`r Sys.Date()`"
format: html
---

## Introduction

Loops in R allow us to execute a block of code multiple times.
They are useful when dealing with repetitive tasks such as 
performing same calculations repeatedly.
In this document, we will explore the mechanics of loops in R 
and discuss for what it can be used.

## Mechanics of a Loop

A loop typically consists of three main components:

1. **Initialization**: Setting up the loop variable.
2. **Condition**: Defining when the loop should stop.
3. **Iteration**: Updating the loop variable each cycle.

R supports several types of loops, with `for` loops being the most common.

### Example: `for` Loop in R

```{r}
# Example of a for loop in R
for (iteration in 1:5) {
  print(paste("Iteration number:", iteration))
}
```

In this example:
- The variable `iteration` takes values from `1` to `5`.
- The `print()` function outputs the current value of `iteration`.
- The loop runs five times, once for each value in `1:5`.


## Iterating on Elements of a Vector

We can iterate along the vectors


```{r}
fruits <- c("apple", "banana", "cherry")

for (fruit in fruits) {
  print(fruit)
}
```

## The Iterated Value in the Global Environment

When using a `for` loop, the loop variable 
(e.g., `fruit` in the example above)
is assigned in the **global environment**, 
meaning it remains available even after the loop has finished executing.

```{r}
print(fruit)
```


Here, `fruit` retains its last assigned value (`"cherry"`) in the global environment. This behavior is important to consider when working with loops in R, as it can lead to unintended side effects if the loop variable is used later in the code.


## Iterating on Indexes of a Vector
Often it is useful to iterate accross the indices instead of values of the vector:

```{r}
numbers <- c(10, 20, 30)

seq_along(numbers)
1:length(numbers)

for (index in seq_along(numbers)) {
  print(paste("Index:", index, "Value:", numbers[index]))
}
```



## Storing Results of a Loop

Loops are like Las Vegas - what happens in a for loops, stays in a for loop
...unless we store it somewhere

```{r}
squares <- numeric(5)
for (i in 1:5) {
  squares[i] <- i^2
}
print(squares)
```

## `if..else` in a Loop

```{r}
for (i in 1:5) {
  if (i %% 2 == 0) {
    print(paste(i, "is even"))
  } else {
    print(paste(i, "is odd"))
  }
}
```

## Control Statements: `next` and `break`
There are some statements we can use to control the for loop behaviour

```{r}
for (i in 1:10) {
  if (i %% 2 == 0) next  # Skip even numbers
  if (i > 7) break  # Stop loop if i > 7
  print(i)
}
```

## Nested `for` loops

``` {r}
# Outer loop
for (i in 1:3) {
  # Inner loop
  for (j in 1:3) {
    print(paste("i =", i, "and j =", j))
  }
}
```


## `while` Loop

```{r}
counter <- 1
while (counter <= 5) {
  print(paste("Counter:", counter))
  counter <- counter + 1
}
```

## Brief Introduction to `apply()` Family of Functions

The `apply()` family provides alternatives to loops for applying functions over elements of vectors, matrices, or lists.

```{r}

data <- USArrests[1:10, c("Murder", "Assault", "Rape")]

sum_by_row <- apply(data, 1, sum) # Sum over rows
sum_by_col <- apply(data, 2, sum) # Sum over columns
```

```{r}

df_list <- list(iris, USArrests, mtcars )

lapply(df_list, function(df) nrow(df) )

```

```{r}
sapply(df_list, function(df) nrow(df) )
```


## Interesting Use Cases for Loops

### Creating Multiple Plots

```{r}
library(ggplot2)
for (i in 1:3) {
  df <- data.frame(x = rnorm(100), y = rnorm(100))
  p <- ggplot(df, aes(x, y)) + geom_point() + ggtitle(paste("Plot", i))
  print(p)
}
```

### Performing Operations on Multiple Files

```r
file_list <- list.files(path = "data", pattern = "*.csv", full.names = TRUE)
for (file in file_list) {
  data <- read.csv(file)
  print(paste("Processing file:", file))
}
```

## Exercises 
- [R Tutorials - For loops  and more](http://r-tutorials.com/r-exercises-71-80-loops-loop-loop-repeat-loop-ifelse-statements-r/)
- [R tutorials - apply etc](http://r-tutorials.com/r-exercises-apply-family-functions/)


## Conclusion

Loops in R are powerful tools for iterating over data structures and automating repetitive tasks. However, it's crucial to remember that the loop variable remains in the global environment, which may affect later computations. Understanding these mechanics helps in writing efficient and predictable R code.

---

### Further Reading
- `?for` in R Documentation
- [R for Data Science - Iteration](https://r4ds.had.co.nz/iteration.html)
